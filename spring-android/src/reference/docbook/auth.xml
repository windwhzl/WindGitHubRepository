<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="auth" 
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xl="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd">
	
  <title>Auth Module</title>

  <section id="auth-introduction">
	
    <title>Introduction</title>

    <para>Many mobile applications today connect to external web services to access some type of data. These web services may be a third-party data provider, such as <ulink url="http://twitter.com">
 	<citetitle>Twitter</citetitle></ulink>, or it may be an in house service for connecting to a corporate calendar, for example. In many of these cases, to access that data through the web service, you must authenticate and authorize an application on your mobile device. The goal of the spring-android-auth module is to address the need of an Android application to gain authorization to a web service.</para>

  	<para>There are many types of authorization methods and protocols, some custom and proprietary, while others are open standards. One protocol that is rapidly growing in popularity is <ulink url="http://oauth.net/">
 	<citetitle>OAuth</citetitle></ulink>. OAuth is an open protocol that allows users to give permission to a third-party application or web site to access restricted resources on another web site or service. The third-party application receives an access token with which it can make requests to the protected service. By using this access token strategy, a user's login credentials are never stored within an application, and are only required when authenticating to the service.</para>

  </section>

  <section id="auth-overview">

	<title>Overview</title>

	<para>The initial release of the spring-android-auth module provides <ulink url="http://oauth.net/">
 	<citetitle>OAuth</citetitle></ulink> 1.x and 2.0 support in an Android application by utilizing <ulink url="http://projects.spring.io/spring-social/">
 	<citetitle>Spring Social</citetitle></ulink>. It includes a <ulink url="http://www.sqlite.org/">
 	<citetitle>SQLite</citetitle></ulink> repository, and Android compatible <ulink url="http://docs.spring.io/spring-security/site/index.html">
 	<citetitle>Spring Security</citetitle></ulink> encryption. The Spring Social project enables your applications to establish Connections with Software-as-a-Service (SaaS) Providers such as <ulink url="http://facebook.com">
 	<citetitle>Facebook</citetitle></ulink> and <ulink url="http://twitter.com">
 	<citetitle>Twitter</citetitle></ulink> to invoke Service APIs on behalf of Users. In order to make use of Spring Social on Android the following classes are available.</para>
	
	<section>
		
		<title>SQLite Connection Repository</title>
		
		<para>The <ulink url="http://docs.spring.io/spring-android/docs/1.0.x/api/org/springframework/social/connect/sqlite/SQLiteConnectionRepository.html">
 	<citetitle>
 		<classname>SQLiteConnectionRepository</classname>
 	</citetitle></ulink> class implements the <ulink url="http://docs.spring.io/spring-social/docs/1.0.x/api/org/springframework/social/connect/ConnectionRepository.html">
 	<citetitle>
 		<interfacename>ConnectionRepository</interfacename>
 	</citetitle></ulink> interface from Spring Social. It is used to persist the connection information to a <ulink url="http://www.sqlite.org/">
 	<citetitle>SQLite</citetitle></ulink> database on the Android device. This connection repository is designed for a single user who accesses multiple service providers and may even have multiple accounts on each service provider.</para>
		
		<para>If your device and application are used by multiple people, then a <ulink url="http://docs.spring.io/spring-android/docs/1.0.x/api/index.html?org/springframework/social/connect/sqlite/SQLiteConnectionRepository.html">
 	<citetitle>
 		<classname>SQLiteUsersConnectionRepository</classname>
 	</citetitle></ulink> class is available for storing multiple user accounts, where each user account may have multiple connections per provider. This scenario is probably not as typical, however, as many people do not share their phones or devices.</para>
		
	</section>
	
	<section>
		
		<title>Encryption</title>
		
		<para>The Spring Security Crypto library is not currently supported on Android. To take advantage of the encryption tools in Spring Security, the Android specific class, <ulink url="http://docs.spring.io/spring-android/docs/1.0.x/api/org/springframework/security/crypto/encrypt/AndroidEncryptors.html">
 	<citetitle>
 		<classname>AndroidEncryptors</classname>
 	</citetitle></ulink> has been provided in Spring for Android. This class uses an Android compatible <ulink url="http://developer.android.com/reference/java/security/SecureRandom.html">
 	<citetitle>
 		<classname>SecureRandom</classname>
 	</citetitle></ulink> provider for generating byte array based keys using the SHA1PRNG algorithm.</para>
		
	</section>

  </section>

  <section id="auth-howtoget">
	
    <title>How to get</title>

	<para>There are a few methods for including external jars in your Android app. One is to manually download them and include them in your app's <literal>libs/</literal> folder. Another option is to use Maven for dependency management.</para>

	<section>

		<title>Standard Installation</title>

		<para>In order to use RestTemplate in your Android application, you must include the following Spring jars in the <literal>libs/</literal> folder. These are available from the SpringSource <ulink url="http://www.springsource.org/download/community">
 	<citetitle>Community Downloads</citetitle></ulink> page.

			<itemizedlist>
				<listitem><literal>spring-android-auth-{version}.jar</literal></listitem>
				<listitem><literal>spring-android-rest-template-{version}.jar</literal></listitem>
				<listitem><literal>spring-android-core-{version}.jar</literal></listitem>
				<listitem><literal>spring-security-crypto-{version}.jar</literal></listitem>
				<listitem><literal>spring-social-core-{version}.jar</literal></listitem>
			</itemizedlist>

		</para>
		
		<para>Each <ulink url="http://www.springsource.org/spring-social">
 	<citetitle>Spring Social</citetitle></ulink> provider may have additional dependencies. For example, to use Spring Social Twitter, the following jars are required.

			<itemizedlist>
				<listitem><literal>spring-social-twitter-{version}.jar</literal></listitem>
				<listitem><literal>spring-social-core-{version}.jar</literal></listitem>
				<listitem><literal>spring-security-crypto-{version}.jar</literal></listitem>
				<listitem><literal>jackson-mapper-asl-{version}.jar</literal></listitem>
				<listitem><literal>jackson-core-asl-{version}.jar</literal></listitem>
			</itemizedlist>

		</para>

		<para>If you are building your project with Ant, Ant will automatically include any jars located in the <literal>libs/</literal> folder located in the root of your project. However, in Eclipse you must manually add the jars to the Build Path. Follow these steps to add the jars to your existing Android project in Eclipse.

		<orderedlist>
			<listitem>Refresh the project in Eclipse so the <literal>libs/</literal> folder and jars display in the Package Explorer.</listitem>
			<listitem>Right-Click (Command-Click) the first jar.</listitem>
			<listitem>Select the <literal>BuildPath</literal> submenu.</listitem>
			<listitem>Select <literal>Add to Build Path</literal> from the context menu.</listitem>
			<listitem>Repeat these steps for each jar.</listitem>
		</orderedlist>

		</para>

	</section>
	
	<section>
		
		<title>Maven Dependencies</title>

		<para>Add the spring-android-auth artifact to your classpath. See the <link linkend="spring-android-maven">Spring for Android and Maven</link> section for more information.

			<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.springframework.android</groupId>
    <artifactId>spring-android-auth</artifactId>
    <version>${spring-android-version}</version>
</dependency>]]>
			</programlisting>
	
		</para>
	
		<para>The transitive dependencies are automatically imported by Maven, but they are listed here for clarity.

			<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.springframework.android</groupId>
    <artifactId>spring-android-rest-template</artifactId>
    <version>${spring-android-version}</version>
</dependency>

<dependency>
    <groupId>org.springframework.android</groupId>
    <artifactId>spring-android-core</artifactId>
    <version>${spring-android-version}</version>
</dependency>

<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-crypto</artifactId>
    <version>${spring-security-crypto-version}</version>
    <exclusions>
        <!-- Exclude in favor of Spring for Android Core -->
        <exclusion>
            <artifactId>spring-core</artifactId>
            <groupId>org.springframework</groupId>
        </exclusion>
    </exclusions>
</dependency>

<dependency>
    <groupId>org.springframework.social</groupId>
    <artifactId>spring-social-core</artifactId>
    <version>${spring-social-version}</version>
    <exclusions>
        <!-- Exclude in favor of Spring for Android RestTemplate -->
        <exclusion>
            <artifactId>spring-web</artifactId>
            <groupId>org.springframework</groupId>
        </exclusion>
    </exclusions>
</dependency>]]>
			</programlisting>
		
		</para>
	
		<para>To use the Spring Social Twitter provider, you can add it to your classpath. Note the exclusions in this dependency. Commons Logging is built into Android, and many of the Spring Social provider libraries are built with support for Spring Web, which is not needed on Android.

			<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.springframework.social</groupId>
    <artifactId>spring-social-twitter</artifactId>
    <version>${spring-social-version}</version>
    <exclusions>
        <exclusion>
            <!-- Provided by Android -->
            <artifactId>commons-logging</artifactId>
            <groupId>commons-logging</groupId>
        </exclusion>
    </exclusions>
</dependency>]]>
			</programlisting>
		
		</para>
	
		<para>Similarly, you can use the Spring Social Facebook provider by adding it to your classpath. Again note the exclusions.

			<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.springframework.social</groupId>
    <artifactId>spring-social-facebook</artifactId>
    <version>${spring-social-version}</version>
    <exclusions>
        <!-- Provided by Android -->
        <exclusion>
            <artifactId>commons-logging</artifactId>
            <groupId>commons-logging</groupId>
        </exclusion>
    </exclusions>
</dependency>]]>
			</programlisting>
		
		</para>
	
		<para>Both the Spring Social Twitter and Facebook libraries transitively depend on the <ulink url="http://jackson.codehaus.org/">
 	<citetitle>Jackson JSON processor</citetitle></ulink>. Again, if you are not using Maven, you will need to include these in your <literal>libs/</literal> folder.
	
			<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.codehaus.jackson</groupId>
    <artifactId>jackson-mapper-asl</artifactId>
    <version>${jackson-version}</version>
</dependency>

<dependency>
    <groupId>org.codehaus.jackson</groupId>
    <artifactId>jackson-core-asl</artifactId>
    <version>${jackson-version}</version>
</dependency>]]>
			</programlisting>
		
		</para>
		
	</section>
	
  </section>

  <section id="auth-examples">
	
  	<title>Usage Examples</title>

  	<para>Below are several usage examples that illustrate how to use Spring for Android with Spring Social.</para>

	<para>The following examples are based on a <ulink url="https://github.com/spring-projects/spring-android-samples">
 	<citetitle>sample Android application</citetitle></ulink>, which has Facebook and Twitter examples using Spring Social. You can retrieve the source code for the sample app with Git:</para>
	
	<programlisting>
$ git clone git://github.com/spring-projects/spring-android-samples.git
	</programlisting>

  	<section>
	
		<title>Initializing the SQLite Database</title>
		
		<para><ulink url="http://docs.spring.io/spring-android/docs/1.0.x/api/org/springframework/social/connect/sqlite/support/SQLiteConnectionRepositoryHelper.html">
	<citetitle>
		<classname>SQLiteConnectionRepositoryHelper</classname>
	</citetitle></ulink> extends <ulink url="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html">
 	<citetitle>
 		<classname>SQLiteOpenHelper</classname>
 	</citetitle></ulink>.  Create a new instance by passing a <ulink url="http://developer.android.com/reference/android/content/Context.html">
 	<citetitle>
 		<classname>context</classname>
 	</citetitle></ulink> reference. Depending on your implementation, and to avoid <ulink url="http://developer.android.com/resources/articles/avoiding-memory-leaks.html">
 	<citetitle>memory leaks</citetitle></ulink>, you will probably want to use the Application Context when creating a new instance of <classname>SQLiteConnectionRepositoryHelper</classname>. The name of the database file created is <literal>spring_social_connection_repository.sqlite</literal>, and is created the first time the application attempts to open it.</para>
		
		<programlisting language="java"><![CDATA[
Context context = getApplicationContext();
SQLiteOpenHelper repositoryHelper = new SQLiteConnectionRepositoryHelper(context);]]>
		</programlisting>

	</section>
	
  	<section>

		<title>Single User App Environment</title>

		<para>This example show how to set up the <interfacename>ConnectionRepository</interfacename> for use with multiple connection factories.</para>
		
		<para>To establish a <interfacename>ConnectionRepository</interfacename>, you will need the following objects.</para>

		<programlisting language="java"><![CDATA[
ConnectionFactoryRegistry connectionFactoryRegistry;
SQLiteOpenHelper repositoryHelper;
ConnectionRepository connectionRepository;]]>
		</programlisting>
			
		<para>The <ulink url="http://docs.spring.io/spring-social/docs/1.0.x/api/org/springframework/social/connect/support/ConnectionFactoryRegistry.html">
 	<citetitle>
 		<classname>ConnectionFactoryRegistry</classname>
 	</citetitle></ulink> stores the different Spring Social connections to be used in the application.</para>
		
		<programlisting language="java"><![CDATA[
connectionFactoryRegistry = new ConnectionFactoryRegistry();]]>
		</programlisting>

		<para>You can create a <ulink url="http://docs.spring.io/spring-social-facebook/docs/1.0.x/api/org/springframework/social/facebook/connect/FacebookConnectionFactory.html">
 	<citetitle>
 		<classname>FacebookConnectionFactory</classname>
 	</citetitle></ulink>, if your application requires Facebook connectivity.</para>
		
		<programlisting language="java"><![CDATA[
// the App ID and App Secret are provided when you register a new Facebook application at facebook.com
String appId = "8ae8f060d81d51e90fadabaab1414a97";
String appSecret = "473e66d79ddc0e360851dc512fe0fb1e";

// Prepare a Facebook connection factory with the App ID and App Secret
FacebookConnectionFactory facebookConnectionFactory;
facebookConnectionFactory = new FacebookConnectionFactory(appId, appSecret);]]>
		</programlisting>

		<para>Similarly, you can also create a <ulink url="http://docs.spring.io/spring-social-twitter/docs/1.0.x/api/org/springframework/social/twitter/connect/TwitterConnectionFactory.html">
 	<citetitle>
 		<classname>TwitterConnectionFactory</classname>
 	</citetitle></ulink>.  Spring Social offers several different connection factories to popular services.  Additionally, you can create your own connection factory based on the Spring Social framework.</para>

		<programlisting language="java"><![CDATA[
// The consumer token and secret are provided when you register a new Twitter application at twitter.com
String consumerToken = "YR571S2JiVBOFyJS5MEg";
String consumerTokenSecret = "Kb8hS0luftwCJX3qVoyiLUMfZDtK1EozFoUkjNLUMx4";

// Prepare a Twitter connection factory with the consumer token and secret
TwitterConnectionFactory twitterConnectionFactory;
twitterConnectionFactory = new TwitterConnectionFactory(consumerToken, consumerTokenSecret)]]>
		</programlisting>

		<para>After you create a connection factory, you can add it to the registry. Connection factories may be later retrieved from the registry in order to create new connections to the provider.</para>

		<programlisting language="java"><![CDATA[
connectionFactoryRegistry.addConnectionFactory(facebookConnectionFactory);
connectionFactoryRegistry.addConnectionFactory(twitterConnectionFactory);]]>
		</programlisting>

		<para>The final step is to prepare the connection repository for storing connections to the different providers.</para>

		<programlisting language="java"><![CDATA[
// Create the SQLiteOpenHelper for creating the local database
Context context = getApplicationContext();
SQLiteOpenHelper repositoryHelper = new SQLiteConnectionRepositoryHelper(context);

// The connection repository takes a TextEncryptor as a parameter for encrypting the OAuth information
TextEncryptor textEncryptor = AndroidEncryptors.noOpText();

// Create the connection repository
ConnectionRepository connectionRepository = new SQLiteConnectionRepository(repositoryHelper, 
	connectionFactoryRegistry, textEncryptor);]]>
		</programlisting>

	</section>
	
	<section>

		<title>Encrypting OAuth Data</title>

		<para>Spring Social supports encrypting the user's OAuth connection information within the <classname>ConnectionRepository</classname> through the use of a Spring Security <classname>TextEncryptor</classname>.  The password and salt values are used to generate the encryptor's secret key. The salt value should be hex-encoded, random, and application-global.  While this will encrypt the OAuth credentials stored in the database, it is not an absolute solution.  When designing your application, keep in mind that there are already tools available for translating a DEX to a JAR file, and decompiling to source code.  Because your application is distributed to a user's device, it is more vulnerable than if it were running on a web server, for example.</para>

		<programlisting language="java"><![CDATA[
String password = "password";
String salt = "5c0744940b5c369b";
TextEncryptor textEncryptor = AndroidEncryptors.text(password, salt);
connectionRepository = new SQLiteConnectionRepository(repositoryHelper, 
	connectionFactoryRegistry, textEncryptor);]]>
		</programlisting>
		
		<para>During development you may wish to avoid encryption so you can more easily debug your application by viewing the OAuth data being saved to the database. This <classname>TextEncryptor</classname> performs no encryption.</para>
		
		<programlisting language="java"><![CDATA[
TextEncryptor textEncryptor = AndroidEncryptors.noOpText();
connectionRepository = new SQLiteConnectionRepository(repositoryHelper, 
	connectionFactoryRegistry, textEncryptor);]]>
		</programlisting>
	
	</section>
	
	<section>
			
		<title>Establishing an OAuth 1.0a connection</title>
	
		<para>The following steps illustrate how to establish a connection to Twitter. A working example is provided in the sample application described earlier.</para>
		
		<para>The first step is to retrieve the connection factory from the registry that we created earlier.</para>
		
		<programlisting language="java"><![CDATA[
TwitterConnectionFactory connectionFactory;
connectionFactory = (TwitterConnectionFactory) connectionFactoryRegistry.getConnectionFactory(Twitter.class);]]>
		</programlisting>
		
		<para>Fetch a one time use request token. You must save this request token, because it will be needed in a later step.</para>
		
		<programlisting language="java"><![CDATA[  
OAuth1Operations oauth = connectionFactory.getOAuthOperations();

// The callback url is used to respond to your application with an OAuth verifier
String callbackUrl = "x-org-springsource-android-showcase://twitter-oauth-response";

// Fetch a one time use Request Token from Twitter
OAuthToken requestToken = oauth.fetchRequestToken(callbackUrl, null);]]>
		</programlisting>
		
		<para>Generate the url for authorizing against Twitter. Once you have the url, you use it in a WebView so the user can login and authorize your application.  One method of doing this is provided in the sample application.</para>

		<programlisting language="java"><![CDATA[
String authorizeUrl = oauth.buildAuthorizeUrl(requestToken.getValue(), OAuth1Parameters.NONE);]]>
		</programlisting>
		
		<para>Once the user has successfully authenticated and authorized the application, Twitter will call back to your application with the oauth verifier. The following settings from an AndroidManifest illustrate how to associate a callback url with a specific Activity.  In this case, when the request is made from Twitter to the callback url, the TwitterActivity will respond.</para>
		
		<programlisting language="xml"><![CDATA[
<activity android:name="org.springframework.android.showcase.social.twitter.TwitterActivity">
  <intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="x-org-springsource-android-showcase" android:host="twitter-oauth-response" />
  </intent-filter>
</activity>]]>
		</programlisting>
		
		<para>The Activity that responds to the callback url should retrieve the <literal>oauth_verifier</literal> querystring parameter from the request.</para>
		
		<programlisting language="java"><![CDATA[
Uri uri = getIntent().getData();
String oauthVerifier = uri.getQueryParameter("oauth_verifier");]]>
		</programlisting>
		
		<para>Once you have the oauth_verifier, you can authorize the request token that was saved earlier.</para>
	
		<programlisting language="java"><![CDATA[
AuthorizedRequestToken authorizedRequestToken = new AuthorizedRequestToken(requestToken, verifier);]]>
		</programlisting>
		
		<para>Now exchange the authorized request token for an access token. Once you have the access token, the request token is no longer required, and can be safely discarded.</para>

		<programlisting language="java"><![CDATA[
OAuth1Operations oauth = connectionFactory.getOAuthOperations();
OAuthToken accessToken = oauth.exchangeForAccessToken(authorizedRequestToken, null);]]>
		</programlisting>
		
		<para>Finally, we can create a Twitter connection and store it in the repository.</para>

		<programlisting language="java"><![CDATA[
Connection<TwitterApi> connection = connectionFactory.createConnection(accessToken);
connectionRepository.addConnection(connection);]]>
		</programlisting>
		
	</section>
	
	<section>

		<title>Establishing an OAuth 2.0 connection</title>

		<para>The following steps illustrate how to establish a connection to Facebook. A working example is provided in the sample application described earlier.  Keep in mind that each provider's implementation may be different. You may have to adjust these steps when connecting to a different OAuth 2.0 provider.</para>

		<para>The first step is to retrieve the connection factory from the registry that we created earlier.</para>

		<programlisting language="java"><![CDATA[
FacebookConnectionFactory connectionFactory;
connectionFactory = (FacebookConnectionFactory) connectionFactoryRegistry.getConnectionFactory(Facebook.class);]]>
		</programlisting>
		
		<para>Specify the redirect url. In the case of Facebook, we are using the client-side authorization flow. In order to retrieve the access token, Facebook will redirect to a success page that contains the access token in a URI fragment.</para>
		
		<programlisting language="java"><![CDATA[
String redirectUri = "https://www.facebook.com/connect/login_success.html";]]>
		</programlisting>

		<para>Define the scope of permissions your app requires.</para>

		<programlisting language="java"><![CDATA[
String scope = "publish_stream,offline_access,read_stream,user_about_me";]]>
		</programlisting>
		
		<para>In order to display a mobile formatted web page for Facebook authorization, you must <ulink url="http://developers.facebook.com/docs/guides/mobile/#web">
 	<citetitle>pass an additional parameter</citetitle></ulink> in the request. This parameter is not part of the OAuth specification, but the following illustrates how Spring Social supports additional parameters.</para>

		<programlisting language="java"><![CDATA[
MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();
additionalParameters.add("display", "touch");]]>
		</programlisting>
		
		<para>Now we can generate the Facebook authorization url to be used in the browser or web view</para>

		<programlisting language="java"><![CDATA[
OAuth2Parameters parameters = new OAuth2Parameters(redirectUri, scope, null, additionalParameters);
OAuth2Operations oauth = connectionFactory.getOAuthOperations();
String authorizeUrl = oauth.buildAuthorizeUrl(GrantType.IMPLICIT_GRANT, parameters);]]>
		</programlisting>
		
		<para>The next step is to load the generated authorization url into a webview within your application. After the user logs in and authorizes your application, the browser will redirect to the url specified earlier. If authentication was successful, the url of the redirected page will now include a URI fragment which contains an access_token parameter. Retrieve the access token from the URI fragment and use it to create the Facebook connection. One method of doing this is provided in the sample application.</para>
		
		<programlisting language="java"><![CDATA[
AccessGrant accessGrant = new AccessGrant(accessToken);
Connection<FacebookApi> connection = connectionFactory.createConnection(accessGrant);
connectionRepository.addConnection(connection);]]>
		</programlisting>
		
	</section>
	
  </section>

</chapter>
