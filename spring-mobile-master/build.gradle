buildscript {
	repositories {  
		maven { url "http://repo.spring.io/plugins-release" }
	}
	dependencies {
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.6")
		classpath("org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE")
		classpath("org.springframework.build.gradle:docbook-reference-plugin:0.2.8")
		classpath("me.champeau.gradle:gradle-javadoc-hotfix-plugin:0.1")
	}
}

configure(allprojects) {
	group = "org.springframework.mobile"

	ext.springVersion         = "3.2.11.RELEASE"
	ext.springReleaseVersion  = "latest.release"
	ext.springSnapshotVersion = "latest.integration"
	ext.junitVersion          = "4.11"
	ext.easymockVersion       = "3.2"
	ext.hamcrestVersion       = "1.3"
	ext.servletApiVersion     = "3.0.1"

	apply plugin: "propdeps"
	apply plugin: "propdeps-eclipse"
	apply plugin: "propdeps-idea"
	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "javadocHotfix"

	if (project.hasProperty('platformVersion')) {
		apply plugin: 'spring-io'

		repositories {
			maven { url "https://repo.spring.io/libs-snapshot" }
		}

		dependencies {
			springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties"
		}
	}

	compileJava {
		sourceCompatibility=1.5
		targetCompatibility=1.5
	}
	compileTestJava {
		sourceCompatibility=1.7
		targetCompatibility=1.7
	}

	[compileJava, compileTestJava]*.options*.compilerArgs = [
		"-Xlint:serial",
		"-Xlint:varargs",
		"-Xlint:cast",
		"-Xlint:classfile",
		"-Xlint:dep-ann",
		"-Xlint:divzero",
		"-Xlint:empty",
		"-Xlint:finally",
		"-Xlint:overrides",
		"-Xlint:path",
		"-Xlint:processing",
		"-Xlint:static",
		"-Xlint:try",
		"-Xlint:fallthrough",
		"-Xlint:rawtypes",
		"-Xlint:deprecation",
		"-Xlint:unchecked",
		"-Xlint:-options",
		"-Werror"
	]

	sourceSets.test.resources.srcDirs = [
		"src/test/resources",
		"src/test/java"
	]

	tasks.withType(Test).all {
		systemProperty("java.awt.headless", "true")
	}

	repositories {
		maven { url "http://repo.spring.io/libs-snapshot" }
	}

	dependencies {
		testCompile("org.springframework:spring-test:${springVersion}")
		testCompile("junit:junit:${junitVersion}")
		testCompile("org.hamcrest:hamcrest-all:${hamcrestVersion}")
		testCompile("org.easymock:easymock:${easymockVersion}")
	}

	ext.javadocLinks = [
		"http://docs.oracle.com/javase/7/docs/api/",
		"http://docs.oracle.com/javaee/7/api/",
		"http://docs.spring.io/spring/docs/${springVersion}/javadoc-api/",
		"http://docs.jboss.org/jbossas/javadoc/4.0.5/connector/"
	] as String[]

	// servlet-api (2.5) and tomcat-servlet-api (3.0) classpath entries should not be
	// exported to dependent projects in Eclipse to avoid false compilation errors due
	// to changing APIs across these versions
	eclipse.classpath.file.whenMerged { classpath ->
		classpath.entries.findAll { entry -> entry.path.contains("servlet-api") }*.exported = false
	}
}

configure(subprojects) { subproject ->
	apply from: "${rootProject.projectDir}/publish-maven.gradle"

	jar {
		manifest.attributes["Created-By"] =
				"${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = subproject.name
		manifest.attributes["Implementation-Version"] = subproject.version

		from("${rootProject.projectDir}/src/dist") {
			include "license.txt"
			include "notice.txt"
			into "META-INF"
			expand(copyright: new Date().format("yyyy"), version: project.version)
		}
	}

	javadoc {
		description = "Generates project-level javadoc for use in -javadoc jar"

		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
		options.links(project.ext.javadocLinks)
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

	task sourcesJar(type: Jar, dependsOn:classes) {
		classifier = "sources"
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = "javadoc"
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	configurations { 
		springReleaseTestRuntime.extendsFrom testRuntime
		springSnapshotTestRuntime.extendsFrom testRuntime
	}

	// Test against latest Spring Framework release
	configurations.springReleaseTestRuntime {
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.group == 'org.springframework') {
				details.useVersion springReleaseVersion
			}
		}
	}

	// Test against latest Spring Framework snapshot
	configurations.springSnapshotTestRuntime {
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.group == 'org.springframework') {
				details.useVersion springSnapshotVersion
			}
		}
	}

	task springReleaseTest(type: Test) {
		classpath = sourceSets.test.output + sourceSets.main.output + configurations.springReleaseTestRuntime
		getReports().getJunitXml().setDestination(file("$buildDir/spring-release-test-results/"))
		getReports().getHtml().setDestination(file("$buildDir/reports/spring-release-tests/"))
	}
	check.dependsOn springReleaseTest

	task springSnapshotTest(type: Test) {
		classpath = sourceSets.test.output + sourceSets.main.output + configurations.springSnapshotTestRuntime
		getReports().getJunitXml().setDestination(file("$buildDir/spring-snapshot-test-results/"))
		getReports().getHtml().setDestination(file("$buildDir/reports/spring-snapshot-tests/"))
	}
	check.dependsOn springSnapshotTest

	configure([test, springReleaseTest, springSnapshotTest]) {
		systemProperties['springVersion'] = springVersion
	}
}

project('spring-mobile-device') {
	description = "Spring Mobile Device Resolution Support"
	dependencies {
		compile("org.springframework:spring-web:${springVersion}")
		compile("org.springframework:spring-webmvc:${springVersion}")
		provided("javax.servlet:javax.servlet-api:${servletApiVersion}")
	}
}

configure(rootProject) {
	description = "Spring Mobile"

	apply plugin: "docbook-reference"

	reference { sourceDir = file("src/reference/docbook") }

	// don't publish the default jar for the root project
	configurations.archives.artifacts.clear()

	dependencies {
		// for integration tests
	}

	task api(type: Javadoc) {
		group = "Documentation"
		description = "Generates aggregated Javadoc API documentation."
		title = "${rootProject.description} ${version} API"
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		options.overview = "src/api/overview.html"
		options.links(project.ext.javadocLinks)
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}

		source subprojects.collect { project ->
			project.sourceSets.main.allJava
		}

		classpath = files(subprojects.collect { project ->
			project.sourceSets.main.compileClasspath
		})

		maxMemory = "1024m"
		destinationDir = new File(buildDir, "api")
	}

	task docsZip(type: Zip) {
		group = "Distribution"
		classifier = "docs"
		description = "Builds -${classifier} archive containing api and reference " +
				"for deployment at docs.spring.io/spring-mobile/docs."

		from("src/dist") { include "changelog.txt" }

		from (api) { into "api" }

		from (reference) { into "reference" }
	}

	task distZip(type: Zip, dependsOn: docsZip) {
		group = "Distribution"
		classifier = "dist"
		description = "Builds -${classifier} archive, containing all jars and docs, " +
				"suitable for community download page."

		def baseDir = "${project.name}-${project.version}";

		from("src/dist") {
			include "readme.txt"
			include "license.txt"
			include "notice.txt"
			into "${baseDir}"
			expand(copyright: new Date().format("yyyy"), version: project.version)
		}

		from(zipTree(docsZip.archivePath)) { into "${baseDir}/docs" }

		subprojects.each { subproject ->
			into ("${baseDir}/libs") {
				from subproject.jar
				if (subproject.tasks.findByPath("sourcesJar")) {
					from subproject.sourcesJar
				}
				if (subproject.tasks.findByPath("javadocJar")) {
					from subproject.javadocJar
				}
			}
		}
	}

	artifacts {
		archives docsZip
		archives distZip
	}

	task wrapper(type: Wrapper) {
		gradleVersion = "1.12"
	}

}

task updateRootDocs << {
	copy {
		from "src/dist"
		into "${rootProject.projectDir}"
		include "notice.txt"
		expand(copyright: new Date().format("yyyy"), version: project.version)
		rename { filename -> "NOTICE" }
	}

	copy {
		from "src/dist"
		into "${rootProject.projectDir}"
		include "license.txt"
		rename { filename -> "LICENSE" }
	}
}

build.dependsOn("updateRootDocs")
